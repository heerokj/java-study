package day06;

public class TestMain3Marine참고 {
	public static void main(String[] args) {
		
		                            // (생성자를 실행해서 객체만들고 Marine2의 참조값 대입)
//		Marine2 m1 = new Marine2(); // Marine2 클래스를 이용하여 m1이라는 이름의 새로운 객체 생성
//		System.out.println(m1.hp);  // 객체 m1의 hp라는 변수의 값 출력
//		System.out.println(m1.x);   // 따로 내가 할당하지 않아도 자동으로 초기화 /객체 겁나 많아질때 효율
//		System.out.println(m1.y);
//		System.out.println(m1.사거리);
//		System.out.println(m1.공격력);
//		System.out.println(m1.방어력);
		
		
		
//		Marine2 m2 = new Marine2();  //Marine2 클래스를 이용하여 m2이라는 이름의 새로운 객체 생성
//		System.out.println(m2.hp);   //이미 Marine2클래스에 기본생성자 만들어서 여기서 초기값지정안하고 간편히 불로올수 있음 
		
		
		
		
		System.out.println("------------------");
//		m1.status(); //객체 m1의 status라는 메서드 호출
//		m1.공격하기(); //객체 m1의 공격하기라는 메서드 호출
//		for(int i=0; i<100; i++) { //int형 변수 i생성,i의 값이 100보다 작으면 {}안의 문장실행 후 i를 1씩증가 ->조건 만족하지 않을때까지 진행 
//			m1.스팀팩(); // 위의 조건을 만족하면 객체m1의 스팀팩메소드 호출
//		}
		
//		m1.status(); //객체m1의 status메서드 호출
		System.out.println("------------------");	
		
//		m2.status(); //객체m2의 status라는 메서드 호출
		
		//대상을 지정해서 공격 
//		m1.공격하기(m2); //객체 m1의 공격하기 메서드호출, 매개변수에 m2참조값 대입 ???
//		System.out.println("m2 :" +m2); //m2의 참조값 출력
//		m2.status(); //객체 m2의 status메서드 호출	
		
	}

}
